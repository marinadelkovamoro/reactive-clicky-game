{"version":3,"sources":["components/Navbar/Navbar.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","score","topScore","Game","state","pictures","shufflePictures","i","length","j","Math","floor","random","temp","this","setState","components_Navbar_Navbar","React","Component","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MA6BeA,EAxBA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,UACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,aACzCX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,eAA6CJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,eAEjDH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAGdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,UAAyCL,EAAMa,MAA/C,iBAAoEb,EAAMc,SAA1E,UC4BPC,6MAzCbC,MAAQ,CACNH,MAAO,EACPC,SAAU,EACVG,cAQFC,gBAAkB,SAAAD,GAGd,IAFA,IAAIE,EAAIF,EAASG,OAAO,EAElBD,EAAE,GAAE,CACN,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAWL,EAAE,IAEjCM,EAAOR,EAASE,GACtBF,EAASE,GAAKF,EAASI,GACvBJ,EAASI,GAAKI,EACdN,IAEJ,OAAOF,sFAdPS,KAAKC,SAAS,CAACV,SAAUS,KAAKR,gBAAgBQ,KAAKV,MAAMC,6CAoB3D,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACyB,EAAD,CAAKf,MAAOa,KAAKV,MAAMH,MAAOC,SAAWY,KAAKV,MAAMF,mBAhC3Ce,IAAMC,WCCVC,MAJf,WACE,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4468a430.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\r\n// Then bind the method to the parent, and pass it to the child as a prop\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/\">Clicky Game <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        {/* <NavMessage score={props.score} topScore={props.topScore} /> */}\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Score: {props.score} | Top Score: {props.topScore} </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n//import CardBody from \"./CardBody\";\r\nimport pictures from \"../../pictures.json\";\r\nimport Nav from \"../Navbar\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass Game extends React.Component {\r\n    // Setting the initial state of the Game component\r\n    state = {\r\n      score: 0,\r\n      topScore: 0,\r\n      pictures\r\n    };\r\n    \r\n\r\n    componentDidMount(){\r\n        this.setState({pictures: this.shufflePictures(this.state.pictures)});\r\n    }\r\n    \r\n    shufflePictures = pictures => {\r\n        let i = pictures.length-1;\r\n\r\n        while(i>0){\r\n            const j = Math.floor(Math.random() *(i+1));\r\n            // swapping \r\n            const temp = pictures[i];\r\n            pictures[i] = pictures[j];\r\n            pictures[j] = temp;\r\n            i--;       \r\n        }\r\n        return pictures;\r\n    }\r\n    \r\n  \r\n    // The render method returns the JSX that should be rendered\r\n    render() {\r\n      return (\r\n        <div className=\"card text-center\">\r\n          <Nav score={this.state.score} topScore ={this.state.topScore} />\r\n          {/* <CardBody\r\n            count={this.state.count}\r\n            handleIncrement={this.handleIncrement}\r\n            handleDecrement={this.handleDecrement}\r\n          /> */}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Game;\r\n  ","import React from 'react';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
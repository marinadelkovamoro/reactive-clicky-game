{"version":3,"sources":["components/Navbar/Navbar.js","components/Picture/PictureCard.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","score","topScore","PictureCard","imgProps","alt","name","src","image","onClick","handleClick","Game","state","pictures","shufflePictures","i","length","j","Math","floor","random","temp","handleItemClick","guessedCorrect","newData","_this","map","item","newItem","Object","objectSpread","console","log","JSON","stringify","clicked","correctGuess","incorrectGuess","_this$state","newScore","newTopScore","setState","resetData","this","_this2","components_Navbar_Navbar","picture","Picture_PictureCard","React","Component","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88d4170c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\r\n// Then bind the method to the parent, and pass it to the child as a prop\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"/\">Clicky Game <span className=\"sr-only\">(current)</span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        {/* <NavMessage score={props.score} topScore={props.topScore} /> */}\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Score: {props.score} | Top Score: {props.topScore} </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction PictureCard(props) {\r\n    const imgProps = {\r\n        alt: props.name,\r\n        src: props.image,\r\n        onClick: () => props.handleClick(props.id),\r\n    };\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container\">\r\n                <img {...imgProps} />\r\n                {/* <img alt={props.name} src={props.image} onClick={() => props.handleClick(props.id)} /> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PictureCard;\r\n","import React from \"react\";\r\n//import CardBody from \"./CardBody\";\r\nimport pictures from \"../../pictures.json\";\r\nimport Nav from \"../Navbar\";\r\nimport Card from \"../Picture\";\r\n\r\n// By extending the React.Component class, Counter inherits functionality from it\r\nclass Game extends React.Component {\r\n  // Setting the initial state of the Game component\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    pictures\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.setState({ pictures: this.shufflePictures(this.state.pictures) });\r\n  }\r\n\r\n  shufflePictures = pictures => {\r\n    let i = pictures.length - 1;\r\n\r\n    while (i > 0) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      // swapping places of pictures\r\n      const temp = pictures[i];\r\n      pictures[i] = pictures[j];\r\n      pictures[j] = temp;\r\n      i--;\r\n    }\r\n    return pictures;\r\n  }\r\n  handleItemClick = id => {\r\n    let guessedCorrect = false;\r\n    const newData =this.state.pictures.map((item) => {\r\n      const newItem = { ...item };\r\n      console.log(\"newItem: \" +JSON.stringify(newItem));\r\n      if(newItem.id === id){\r\n        if(!newItem.clicked){\r\n          newItem.clicked = true;\r\n          guessedCorrect = true;\r\n        }\r\n      }\r\n      return newItem;\r\n    });\r\n    guessedCorrect ? this.correctGuess(newData) : this.incorrectGuess(newData);\r\n\r\n  }\r\n\r\n  correctGuess = newData => {\r\n    const {topScore, score } = this.state;\r\n    const newScore = score+1;\r\n    const newTopScore = newScore > topScore ? newScore : topScore;\r\n     this.setState({\r\n       score: newScore,\r\n       topScore: newTopScore,\r\n       pictures: this.shufflePictures(newData)\r\n\r\n     })\r\n  }\r\n  incorrectGuess = newData => {\r\n    this.setState({\r\n      pictures : this.resetData(newData),\r\n      score: 0\r\n    })\r\n  }\r\n  resetData = newData => {\r\n    const resetData = newData.map(item => ({...item, clicked:false}));\r\n    return this.shufflePictures(resetData);\r\n  }\r\n\r\n\r\n  // The render method returns the JSX that should be rendered\r\n  render() {\r\n    return (\r\n      <div className=\"text-center\">\r\n        <Nav score={this.state.score} topScore={this.state.topScore} />\r\n        <div className=\"wrapper\">\r\n          {this.state.pictures.map((picture) => (\r\n            <Card handleClick={this.handleItemClick}\r\n              image={picture.image}\r\n              id={picture.id}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}